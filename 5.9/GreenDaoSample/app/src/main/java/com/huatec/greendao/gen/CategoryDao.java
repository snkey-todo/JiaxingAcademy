package com.huatec.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huatec.greendao.Category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY".
*/
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Cat_id = new Property(0, Long.class, "cat_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Parent_id = new Property(2, int.class, "parent_id", false, "PARENT_ID");
        public final static Property Cat_path = new Property(3, String.class, "cat_path", false, "CAT_PATH");
        public final static Property Goods_count = new Property(4, int.class, "goods_count", false, "GOODS_COUNT");
        public final static Property Sort = new Property(5, int.class, "sort", false, "SORT");
        public final static Property Type_id = new Property(6, int.class, "type_id", false, "TYPE_ID");
        public final static Property List_show = new Property(7, int.class, "list_show", false, "LIST_SHOW");
        public final static Property Image = new Property(8, String.class, "image", false, "IMAGE");
    }


    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: cat_id
                "\"NAME\" TEXT," + // 1: name
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 2: parent_id
                "\"CAT_PATH\" TEXT," + // 3: cat_path
                "\"GOODS_COUNT\" INTEGER NOT NULL ," + // 4: goods_count
                "\"SORT\" INTEGER NOT NULL ," + // 5: sort
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 6: type_id
                "\"LIST_SHOW\" INTEGER NOT NULL ," + // 7: list_show
                "\"IMAGE\" TEXT);"); // 8: image
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long cat_id = entity.getCat_id();
        if (cat_id != null) {
            stmt.bindLong(1, cat_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getParent_id());
 
        String cat_path = entity.getCat_path();
        if (cat_path != null) {
            stmt.bindString(4, cat_path);
        }
        stmt.bindLong(5, entity.getGoods_count());
        stmt.bindLong(6, entity.getSort());
        stmt.bindLong(7, entity.getType_id());
        stmt.bindLong(8, entity.getList_show());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long cat_id = entity.getCat_id();
        if (cat_id != null) {
            stmt.bindLong(1, cat_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getParent_id());
 
        String cat_path = entity.getCat_path();
        if (cat_path != null) {
            stmt.bindString(4, cat_path);
        }
        stmt.bindLong(5, entity.getGoods_count());
        stmt.bindLong(6, entity.getSort());
        stmt.bindLong(7, entity.getType_id());
        stmt.bindLong(8, entity.getList_show());
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(9, image);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // cat_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // parent_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cat_path
            cursor.getInt(offset + 4), // goods_count
            cursor.getInt(offset + 5), // sort
            cursor.getInt(offset + 6), // type_id
            cursor.getInt(offset + 7), // list_show
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // image
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setCat_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParent_id(cursor.getInt(offset + 2));
        entity.setCat_path(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoods_count(cursor.getInt(offset + 4));
        entity.setSort(cursor.getInt(offset + 5));
        entity.setType_id(cursor.getInt(offset + 6));
        entity.setList_show(cursor.getInt(offset + 7));
        entity.setImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setCat_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getCat_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Category entity) {
        return entity.getCat_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
